buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "com.bertramlabs.plugins:sass-dart-asset-pipeline:${assetPipelineVersion}"
    }
}

plugins {
    id "idea"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "com.adarshr.test-logger" version "2.0.0" apply false
}

ext {
    grailsApps = ['application1']
    grailsPlugins = ['core']
}

allprojects {
    version projectVersion
    group "io.github.jdaugherty"
}

subprojects { project ->
    boolean isGrailsApp = grailsApps.contains(project.name)
    boolean isGrailsPlugin = grailsPlugins.contains(project.name)
    boolean isGrailsProject = isGrailsApp || isGrailsPlugin
    boolean hasAssets = file("${project.projectDir}/grails-app/assets").exists()

    if (isGrailsProject) {
        if (isGrailsApp) {
            apply plugin: "org.grails.grails-web"
        }
        if (isGrailsPlugin) {
            apply plugin: "org.grails.grails-plugin"
        }

        apply plugin: "org.grails.grails-gsp"

        if (hasAssets) {
            apply plugin: "com.bertramlabs.asset-pipeline"
        }

        repositories {
            maven { url "https://repo.grails.org/grails/core" }
        }

        configurations {
            developmentOnly
            runtimeClasspath {
                extendsFrom developmentOnly
            }
        }

        dependencies {
            compileOnly "io.micronaut:micronaut-inject-groovy"
            console "org.grails:grails-console"
            implementation "org.springframework.boot:spring-boot-starter-logging"
            implementation "org.springframework.boot:spring-boot-autoconfigure"
            implementation "org.grails:grails-core"
            implementation "org.springframework.boot:spring-boot-starter-actuator"
            implementation "org.springframework.boot:spring-boot-starter-undertow"

            implementation "org.grails:grails-web-boot"
            implementation "org.grails:grails-logging"
            implementation "org.grails:grails-plugin-rest"
            implementation "org.grails:grails-plugin-databinding"
            implementation "org.grails:grails-plugin-i18n"
            implementation "org.grails:grails-plugin-services"
            implementation "org.grails:grails-plugin-url-mappings"
            implementation "org.grails:grails-plugin-interceptors"
            implementation "org.grails.plugins:cache", {
                exclude group: 'com.bertramlabs.plugins', module: 'asset-pipeline-grails'
            }
            implementation "org.grails.plugins:async"
            implementation "org.grails.plugins:hibernate5:7.3.1"
            implementation "org.hibernate:hibernate-core:5.6.15.Final"
            implementation "org.grails.plugins:events"
            implementation "org.grails.plugins:gsp"
            implementation "org.grails:grails-datastore-gorm-async"
            runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
            runtimeOnly "com.h2database:h2:1.4.200"

            if (isGrailsApp) {
                runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
            }

            runtimeOnly  "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}", {
                exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
            }

            // Micronaut
            implementation "io.micronaut:micronaut-http-client"

            // Grails does not export the micronaut reactor in the bom, so this has to match the version of micronaut-core so there aren't conflicts
            implementation "io.micronaut.reactor:micronaut-reactor:$micronautReactorVersion"
            implementation "io.micronaut.reactor:micronaut-reactor-http-client:$micronautReactorVersion"

            runtimeOnly "org.codehaus.groovy:groovy-dateutil"

            // Add better directory watching for live-reloading during development
            developmentOnly "io.methvin:directory-watcher:$methvinDirectoryWatcherVersion"
        }

        if (isGrailsApp) {
            springBoot {
                mainClass = 'io.github.jdaugherty.Application'
            }

            // Don't create a non-bootable jar for applications, we don't need it
            jar {
                enabled = false
            }

            // Enable layering to allow for docker
            bootJar {
                layered {
                    enabled = true
                }
            }
        }

        if (hasAssets) {
            if (isGrailsApp) {
                assets {
                    minifyJs = true
                    minifyCss = true
                    enableSourceMaps = true
                    verbose = true
                    developmentRuntime = true
                    configOptions = [
                        commonJs: false,
                        sass: [quietDeps: true]
                    ]

                    minifyOptions = [
                        optimizationLevel: 'SIMPLE'
                    ]
                }
            }
            if (isGrailsPlugin) {
                assets {
                    packagePlugin = true
                }
                bootJar {
                    enabled = false
                }
            }
        }

        // Tell IntelliJ to ignore these directories
        idea {
            module {
                excludeDirs += [file("$projectDir/logs"), file("$projectDir/target")]
            }
        }

        apply from: rootProject.file("gradle/testing.gradle")
        apply from: rootProject.file("gradle/compile.gradle")
    }

    task('bomProperties') {
        group = 'Introspection'
        description = 'Print properties from all BOMs'
        doLast {
            dependencyManagement.importedProperties.sort().each { println it }
        }
    }

    task('exportVersion') {
        doLast {
            println "##teamcity[setParameter name='build.${project.name}.version' value='${projectVersion}']"
        }
    }
}

// asset-pipeline #177 work around for parallel builds in CI
if (gradle.startParameter.parallelProjectExecutionEnabled) {
    def parentProject = project(':core')
    [project(':application1')].each { dependentProject ->
        dependentProject.afterEvaluate {
            def assetTask = tasks.getByPath("$dependentProject.path:assetCompile")
            assetTask.outputs.dir "${parentProject.buildDir}/asset-serialize"
        }
    }
}
